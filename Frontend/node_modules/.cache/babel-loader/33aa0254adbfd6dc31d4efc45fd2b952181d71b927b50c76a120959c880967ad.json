{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\foura\\\\OneDrive\\\\Desktop\\\\Movie-Recommendation-System\\\\Frontend\\\\src\\\\pages\\\\Profile\\\\Profile.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { category } from '../../api/tmdbApi'; // Importing the category for URL construction\nimport apiConfig from '../../api/apiConfig'; // Importing the API configuration for image URLs\nimport MovieCard from '../movie-card/MovieCard'; // Importing the MovieCard component\nimport tmdbApi from '../../api/tmdbApi'; // Importing the tmdbApi functions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Profile = ({\n  username = 'User',\n  favoriteMovies = []\n}) => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    const fetchFavoriteMovies = async () => {\n      // Initialize an array to store movie details\n      const movieDetails = [];\n\n      // Loop through each movie name in favoriteMovies array\n      for (let i = 0; i < favoriteMovies.length; i++) {\n        const movieName = favoriteMovies[i];\n        try {\n          // Perform search for the movie name in the chosen category (movie or tv)\n          const response = await tmdbApi.search(category.movie, {\n            query: movieName\n          });\n\n          // Assuming the first result matches the movie we're looking for\n          if (response.results.length > 0) {\n            const movie = response.results[0]; // Get the first search result\n            movieDetails.push(movie); // Push movie details to array\n          } else {\n            console.warn(`No results found for movie: ${movieName}`);\n          }\n        } catch (error) {\n          console.error(`Error fetching details for movie: ${movieName}`, error);\n        }\n      }\n      setMovies(movieDetails); // Set state with fetched movie details\n    };\n    fetchFavoriteMovies();\n  }, [favoriteMovies]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"profile-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profile-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [username, \"'s Profile\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"edit-button\",\n        children: \"Edit Profile\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profile-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Favorite Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-grid\",\n        children: movies.length > 0 ? movies.map((movie, index) => /*#__PURE__*/_jsxDEV(MovieCard, {\n          category: category.movie,\n          item: movie\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"no-movies\",\n          children: \"No favorite movies listed.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_s(Profile, \"MO6b3PSP3RIUqZ8gtSrBZBVtBbs=\");\n_c = Profile;\nexport default Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["React","useState","useEffect","category","apiConfig","MovieCard","tmdbApi","jsxDEV","_jsxDEV","Profile","username","favoriteMovies","_s","movies","setMovies","fetchFavoriteMovies","movieDetails","i","length","movieName","response","search","movie","query","results","push","console","warn","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","item","_c","$RefreshReg$"],"sources":["C:/Users/foura/OneDrive/Desktop/Movie-Recommendation-System/Frontend/src/pages/Profile/Profile.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { category } from '../../api/tmdbApi'; // Importing the category for URL construction\r\nimport apiConfig from '../../api/apiConfig'; // Importing the API configuration for image URLs\r\nimport MovieCard from '../movie-card/MovieCard'; // Importing the MovieCard component\r\nimport tmdbApi from '../../api/tmdbApi'; // Importing the tmdbApi functions\r\n\r\nconst Profile = ({ username = 'User', favoriteMovies = [] }) => {\r\n    const [movies, setMovies] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchFavoriteMovies = async () => {\r\n            // Initialize an array to store movie details\r\n            const movieDetails = [];\r\n\r\n            // Loop through each movie name in favoriteMovies array\r\n            for (let i = 0; i < favoriteMovies.length; i++) {\r\n                const movieName = favoriteMovies[i];\r\n\r\n                try {\r\n                    // Perform search for the movie name in the chosen category (movie or tv)\r\n                    const response = await tmdbApi.search(category.movie, { query: movieName });\r\n\r\n                    // Assuming the first result matches the movie we're looking for\r\n                    if (response.results.length > 0) {\r\n                        const movie = response.results[0]; // Get the first search result\r\n                        movieDetails.push(movie); // Push movie details to array\r\n                    } else {\r\n                        console.warn(`No results found for movie: ${movieName}`);\r\n                    }\r\n                } catch (error) {\r\n                    console.error(`Error fetching details for movie: ${movieName}`, error);\r\n                }\r\n            }\r\n\r\n            setMovies(movieDetails); // Set state with fetched movie details\r\n        };\r\n\r\n        fetchFavoriteMovies();\r\n    }, [favoriteMovies]);\r\n\r\n    return (\r\n        <div className=\"profile-container\">\r\n            <div className=\"profile-header\">\r\n                <h1>{username}'s Profile</h1>\r\n                <button className=\"edit-button\">Edit Profile</button>\r\n            </div>\r\n            <div className=\"profile-content\">\r\n                <h2>Favorite Movies</h2>\r\n                <div className=\"movie-grid\">\r\n                    {movies.length > 0 ? (\r\n                        movies.map((movie, index) => (\r\n                            <MovieCard category={category.movie} item={movie} key={index} />\r\n                        ))\r\n                    ) : (\r\n                        <p className=\"no-movies\">No favorite movies listed.</p>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
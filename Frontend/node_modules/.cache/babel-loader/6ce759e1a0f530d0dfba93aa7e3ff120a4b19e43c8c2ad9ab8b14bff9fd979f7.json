{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\foura\\\\OneDrive\\\\Desktop\\\\Movie-Recommendation-System\\\\Frontend\\\\src\\\\pages\\\\Profile\\\\MovieListProfile.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport MovieCardProfile from './MovieCardProfile'; // Adjust path based on your project structure\nimport tmdbApi, { category } from '../../api/tmdbApi'; // Adjust path based on your project structure\nimport './MovieListProfile.scss'; // Import your CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MovieListProfile = ({\n  username,\n  movieList\n}) => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    const fetchMovieDetails = async () => {\n      try {\n        const movieDetails = await Promise.all(movieList.map(async movieName => {\n          const params = {\n            query: movieName\n          };\n          const response = await tmdbApi.search(category.movie, {\n            params\n          });\n          return response.results[0]; // Assuming the first search result is the closest match\n        }));\n        setMovies(movieDetails);\n      } catch (error) {\n        console.error('Error fetching movie details:', error);\n        // Handle error state or display a message to the user\n      }\n    };\n    fetchMovieDetails();\n  }, [movieList]);\n  const removeMovie = movieId => {\n    const updatedMovies = movies.filter(movie => movie.id !== movieId);\n    setMovies(updatedMovies);\n    // You can add further logic here to update the backend or storage for removing the movie\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-list-profile\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profile-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [username, \"'s Profile\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-list\",\n      children: movies.map((movie, index) => /*#__PURE__*/_jsxDEV(MovieCard, {\n        category: category.movie,\n        item: movie,\n        onRemove: removeMovie\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n_s(MovieListProfile, \"MO6b3PSP3RIUqZ8gtSrBZBVtBbs=\");\n_c = MovieListProfile;\nexport default MovieListProfile;\nvar _c;\n$RefreshReg$(_c, \"MovieListProfile\");","map":{"version":3,"names":["React","useState","useEffect","MovieCardProfile","tmdbApi","category","jsxDEV","_jsxDEV","MovieListProfile","username","movieList","_s","movies","setMovies","fetchMovieDetails","movieDetails","Promise","all","map","movieName","params","query","response","search","movie","results","error","console","removeMovie","movieId","updatedMovies","filter","id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","MovieCard","item","onRemove","_c","$RefreshReg$"],"sources":["C:/Users/foura/OneDrive/Desktop/Movie-Recommendation-System/Frontend/src/pages/Profile/MovieListProfile.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport MovieCardProfile from './MovieCardProfile'; // Adjust path based on your project structure\r\nimport tmdbApi, { category } from '../../api/tmdbApi'; // Adjust path based on your project structure\r\nimport './MovieListProfile.scss'; // Import your CSS file\r\n\r\nconst MovieListProfile = ({ username, movieList }) => {\r\n    const [movies, setMovies] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchMovieDetails = async () => {\r\n            try {\r\n                const movieDetails = await Promise.all(\r\n                    movieList.map(async (movieName) => {\r\n                        const params = { query: movieName };\r\n                        const response = await tmdbApi.search(category.movie, { params });\r\n                        return response.results[0]; // Assuming the first search result is the closest match\r\n                    })\r\n                );\r\n                setMovies(movieDetails);\r\n            } catch (error) {\r\n                console.error('Error fetching movie details:', error);\r\n                // Handle error state or display a message to the user\r\n            }\r\n        };\r\n\r\n        fetchMovieDetails();\r\n    }, [movieList]);\r\n\r\n    const removeMovie = (movieId) => {\r\n        const updatedMovies = movies.filter(movie => movie.id !== movieId);\r\n        setMovies(updatedMovies);\r\n        // You can add further logic here to update the backend or storage for removing the movie\r\n    };\r\n\r\n    return (\r\n        <div className=\"movie-list-profile\">\r\n            <div className=\"profile-header\">\r\n                <h1>{username}'s Profile</h1>\r\n            </div>\r\n            <div className=\"movie-list\">\r\n                {movies.map((movie, index) => (\r\n                    <MovieCard\r\n                        key={index}\r\n                        category={category.movie}\r\n                        item={movie}\r\n                        onRemove={removeMovie}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MovieListProfile;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,gBAAgB,MAAM,oBAAoB,CAAC,CAAC;AACnD,OAAOC,OAAO,IAAIC,QAAQ,QAAQ,mBAAmB,CAAC,CAAC;AACvD,OAAO,yBAAyB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,gBAAgB,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EAClD,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAExCC,SAAS,CAAC,MAAM;IACZ,MAAMY,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI;QACA,MAAMC,YAAY,GAAG,MAAMC,OAAO,CAACC,GAAG,CAClCP,SAAS,CAACQ,GAAG,CAAC,MAAOC,SAAS,IAAK;UAC/B,MAAMC,MAAM,GAAG;YAAEC,KAAK,EAAEF;UAAU,CAAC;UACnC,MAAMG,QAAQ,GAAG,MAAMlB,OAAO,CAACmB,MAAM,CAAClB,QAAQ,CAACmB,KAAK,EAAE;YAAEJ;UAAO,CAAC,CAAC;UACjE,OAAOE,QAAQ,CAACG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QAChC,CAAC,CACL,CAAC;QACDZ,SAAS,CAACE,YAAY,CAAC;MAC3B,CAAC,CAAC,OAAOW,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;QACrD;MACJ;IACJ,CAAC;IAEDZ,iBAAiB,CAAC,CAAC;EACvB,CAAC,EAAE,CAACJ,SAAS,CAAC,CAAC;EAEf,MAAMkB,WAAW,GAAIC,OAAO,IAAK;IAC7B,MAAMC,aAAa,GAAGlB,MAAM,CAACmB,MAAM,CAACP,KAAK,IAAIA,KAAK,CAACQ,EAAE,KAAKH,OAAO,CAAC;IAClEhB,SAAS,CAACiB,aAAa,CAAC;IACxB;EACJ,CAAC;EAED,oBACIvB,OAAA;IAAK0B,SAAS,EAAC,oBAAoB;IAAAC,QAAA,gBAC/B3B,OAAA;MAAK0B,SAAS,EAAC,gBAAgB;MAAAC,QAAA,eAC3B3B,OAAA;QAAA2B,QAAA,GAAKzB,QAAQ,EAAC,YAAU;MAAA;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CAAC,eACN/B,OAAA;MAAK0B,SAAS,EAAC,YAAY;MAAAC,QAAA,EACtBtB,MAAM,CAACM,GAAG,CAAC,CAACM,KAAK,EAAEe,KAAK,kBACrBhC,OAAA,CAACiC,SAAS;QAENnC,QAAQ,EAAEA,QAAQ,CAACmB,KAAM;QACzBiB,IAAI,EAAEjB,KAAM;QACZkB,QAAQ,EAAEd;MAAY,GAHjBW,KAAK;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIb,CACJ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAC3B,EAAA,CA9CIH,gBAAgB;AAAAmC,EAAA,GAAhBnC,gBAAgB;AAgDtB,eAAeA,gBAAgB;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}